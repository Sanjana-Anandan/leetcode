PROBLEM: https://leetcode.com/problems/number-of-zero-filled-subarrays/
DIFFICULTY: MEDIUM

FIRST APPROACH CODE:
class Solution {
public:
    long long zeroFilledSubarray(vector<int>& nums) {

        long long count = 0;
        int first_zero=0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]!=0){first_zero=i+1;}
            else{
                count+=(i-first_zero)+1;
            }
        }
        return count;
        
    }
};

RUNTIME: 0ms
COMPLEXITY: O(n)

SLIGHTLY MODIFIED APPROACH:


class Solution {
public:
    long long zeroFilledSubarray(vector<int>& nums) {

        long long count = 0;
        int zeros=0;
        for(int i=0;i<nums.size();i++){
            if(nums[i]!=0){zeros=0;}
            else{
                zeros++;
                count+=zeros;
            }
        }
        return count;
        
    }
};

RUNTIME: 0ms
COMPLEXITY: O(n)
