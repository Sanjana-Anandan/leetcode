Question Link : https://leetcode.com/problems/find-subsequence-of-length-k-with-the-largest-sum

Description : You are given an integer array nums and an integer k. You want to find a subsequence of nums of length k that has the largest sum.
Return any such subsequence as an integer array of length k.
A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

Example 1:

Input: nums = [2,1,3,3], k = 2
Output: [3,3]
Explanation:
The subsequence has the largest sum of 3 + 3 = 6.

Difficulty : Easy

Topics : 
Array
Hash Table
Sorting
Heap (Priority Queue)

Original Code :

class Solution {
public:
    int mini(vector<int> res) {
        int minval = res[0];

        for (int i = 1; i < res.size(); i++) {
            if (res[i] < minval) {
                minval = res[i];
            }
        }
        return minval;
    }
    vector<int> maxSubsequence(vector<int>& nums, int k) {
        vector<int> res;
        for (int i = 0; i < nums.size(); i++) {
            if (k != 0) {
                res.push_back(nums[i]);
                k--;
            } else {
                int minval = mini(res);

                if (nums[i] > minval) {
                    auto it = find(res.begin(), res.end(), minval);
                    if (it != res.end())
                        res.erase(it);
                    res.push_back(nums[i]);
                }
            }
        }
        return res;
    }
};

RESULT: 
Runtime
11 ms
Beats 7.68%

OPTIMIZATION:

Complexity is high as min function called repeatedly and finding and replacing min with new value included increases cost to O(n*k)

Use : Priority Queue to create a min-heap to keep track of Top K elements 

Optimised Code:
class Solution {
public:
    vector<int> maxSubsequence(vector<int>& nums, int k) {
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> minHeap;

        for (int i = 0; i < nums.size(); i++) {
            minHeap.push({nums[i], i});
            if (minHeap.size() > k) {
                minHeap.pop();
            }
        }

        vector<pair<int, int>> topK;
        while (!minHeap.empty()) {
            topK.push_back(minHeap.top());
            minHeap.pop();
        }

        sort(topK.begin(), topK.end(), [](auto& a, auto& b) {
            return a.second < b.second;
        });

        vector<int> result;
        for (auto& p : topK) {
            result.push_back(p.first);
        }

        return result;
    }
};
RESULT: 
Runtime
0 ms
Beats 100.00%
