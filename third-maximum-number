PROBLEM : https://leetcode.com/problems/third-maximum-number/
DIFFICULTY: EASY

QUESTION: Given an integer array nums, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number.

CODE: class Solution {
public:
    int thirdMax(vector<int>& nums) {
        sort(nums.rbegin(), nums.rend());
        int count = 1, maxval = nums[0];
        for (int i = 1; i < nums.size() && count < 3; i++) {
            if (nums[i] < maxval) {
                maxval = nums[i];
                count++;
            }
        }
        if (count < 3)
            return nums[0];
        else
            return maxval;
    }
};

APPROACH: Sort the array in descending order and track the third distinct maximum by counting unique values while iterating

TIME COMPLEXITY: O(nlogn)

OPTIMISED VERSION (WITHOUT SORTING):
  
class Solution {
public:
    int thirdMax(vector<int>& nums) {
        long first = LONG_MIN, second = LONG_MIN, third = LONG_MIN;

        for (int num : nums) {
            if (num == first || num == second || num == third) continue;

            if (num > first) {
                third = second;
                second = first;
                first = num;
            } else if (num > second) {
                third = second;
                second = num;
            } else if (num > third) {
                third = num;
            }
        }
        return (third == LONG_MIN) ? first : third;
    }
};

TIME COMPLEXITY: O(n)
