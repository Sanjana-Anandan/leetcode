PROBLEM : https://leetcode.com/problems/letter-combinations-of-a-phone-number/
DIFFICULTY: MEDIUM
QUESTION  : Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.
A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

CODE:
class Solution:

    def letterCombinations(self, digits: str) -> List[str]:

        if not digits:
            return []

        result = []

        letters = {
            "2": "abc",
            "3": "def",
            "4": "ghi",
            "5": "jkl",
            "6": "mno",
            "7": "pqrs",
            "8": "tuv",
            "9": "wxyz",
        }

        def backtrack(index, path):

            if len(path) == len(digits):
                result.append(path)
                return
            dig = digits[index]
            for char in letters[dig]:
                backtrack(index + 1, path + char)

        backtrack(0, "")
        return result

APPROACH : Create a dictionary mapping each digit to its letters allowed. 
Then use recursion to consider all possible combinations for each index of the given digit combination by backtracking.

TIME COMPLEXITY: (4^n) * n
TEST CASES: PASSED
